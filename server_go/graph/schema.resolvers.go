package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"fmt"
	"github.com/joho/godotenv"
	"io"
	"net/http"
	"os"
	"spacetraders/graph/model"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.User) (*model.Agent, error) {
	panic(fmt.Errorf("not implemented: RegisterUser - registerUser"))
}

// GetAgent is the resolver for the getAgent field.
func (r *queryResolver) GetAgent(ctx context.Context) (*model.Agent, error) {
	err := godotenv.Load(".env")

	if err != nil {
		fmt.Println("Failed")
	}

	authToken := os.Getenv("AGENT_TOKEN")

	url := "https://api.spacetraders.io/v2/my/agent"

	req, _ := http.NewRequest("GET", url, nil)

	authHeader := "Bearer " + authToken
	req.Header.Add("Authorization", authHeader)

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)
	return &model.Agent{Token: string(body)}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
